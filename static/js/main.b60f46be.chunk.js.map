{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Option","Select","Title","Typography","App","style","textAlign","marginTop","marginBottom","align","width","height","src","alt","level","labelCol","span","wrapperCol","Item","label","min","max","defaultValue","className","href","defaultChecked","value","disabled","RangePicker","offset","type","htmlType","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gXAgBQA,G,OAAWC,IAAXD,QACAE,EAAUC,IAAVD,MA4DOE,EA1DH,kBACV,oCACE,6BAASC,MAAO,CAAEC,UAAW,SAAUC,UAAW,GAAIC,aAAc,KAClE,kBAAC,IAAD,CAAOC,MAAM,SACX,yBACEJ,MAAO,CAACK,MAAO,GAAIC,OAAQ,IAC3BC,IAAI,sEACJC,IAAI,eAEN,kBAACX,EAAD,CAAOY,MAAO,EAAGT,MAAO,CAAEG,aAAc,IAAxC,kBAKJ,kBAAC,IAAD,CAASH,MAAO,CAAEG,aAAc,KAAhC,QACA,kBAAC,IAAD,CAAMO,SAAU,CAAEC,KAAM,GAAKC,WAAY,CAAED,KAAM,IAC/C,kBAAC,IAAKE,KAAN,CAAWC,MAAM,kCACf,kBAAC,IAAD,CAAaC,IAAK,EAAGC,IAAK,GAAIC,aAAc,IAC5C,0BAAMC,UAAU,iBAAhB,uBACA,uBAAGC,KAAK,sBAAR,6BAEF,kBAAC,IAAKN,KAAN,CAAWC,MAAM,gBACf,kBAAC,IAAD,CAAQM,gBAAc,KAExB,kBAAC,IAAKP,KAAN,CAAWC,MAAM,kCACf,kBAAC,IAAD,CAAQG,aAAc,MAExB,kBAAC,IAAKJ,KAAN,CAAWC,MAAM,sBACf,kBAAC,IAAD,CAAQG,aAAa,OAAOjB,MAAO,CAAEK,MAAO,MAC1C,kBAACV,EAAD,CAAQ0B,MAAM,QAAd,QACA,kBAAC1B,EAAD,CAAQ0B,MAAM,QAAd,QACA,kBAAC1B,EAAD,CAAQ0B,MAAM,WAAWC,UAAQ,GAAjC,YACA,kBAAC3B,EAAD,CAAQ0B,MAAM,YAAd,cAGJ,kBAAC,IAAKR,KAAN,CAAWC,MAAM,kCACf,kBAAC,IAAD,OAEF,kBAAC,IAAKD,KAAN,CAAWC,MAAM,8CACf,kBAAC,IAAWS,YAAZ,OAEF,kBAAC,IAAKV,KAAN,CAAWC,MAAM,gBACf,kBAAC,IAAD,CAAMG,aAAc,KAEtB,kBAAC,IAAKJ,KAAN,CAAWD,WAAY,CAAED,KAAM,EAAGa,OAAQ,IACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,KAAK,UAAUC,SAAS,UAAhC,UAGA,kBAAC,IAAD,oBCxDUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b60f46be.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Form,\r\n  Select,\r\n  InputNumber,\r\n  DatePicker,\r\n  Switch,\r\n  Slider,\r\n  Button,\r\n  Rate,\r\n  Typography,\r\n  Space,\r\n  Divider,\r\n} from 'antd';\r\nimport './App.less';\r\n\r\nconst { Option } = Select;\r\nconst { Title } = Typography;\r\n\r\nconst App = () => (\r\n  <>\r\n    <section style={{ textAlign: 'center', marginTop: 48, marginBottom: 40 }}>\r\n      <Space align=\"start\">\r\n        <img\r\n          style={{width: 40, height: 40 }}\r\n          src=\"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg\"\r\n          alt=\"Ant Design\"\r\n        />\r\n        <Title level={2} style={{ marginBottom: 0 }}>\r\n          \bAnt Design\r\n        </Title>\r\n      </Space>\r\n    </section>\r\n    <Divider style={{ marginBottom: 60 }}>Form</Divider>\r\n    <Form labelCol={{ span: 8 }} wrapperCol={{ span: 8 }}>\r\n      <Form.Item label=\"数字输入框\">\r\n        <InputNumber min={1} max={10} defaultValue={3} />\r\n        <span className=\"ant-form-text\"> 台机器</span>\r\n        <a href=\"https://ant.design\">链接文字</a>\r\n      </Form.Item>\r\n      <Form.Item label=\"开关\">\r\n        <Switch defaultChecked />\r\n      </Form.Item>\r\n      <Form.Item label=\"滑动输入条\">\r\n        <Slider defaultValue={70} />\r\n      </Form.Item>\r\n      <Form.Item label=\"选择器\">\r\n        <Select defaultValue=\"lucy\" style={{ width: 192 }}>\r\n          <Option value=\"jack\">jack</Option>\r\n          <Option value=\"lucy\">lucy</Option>\r\n          <Option value=\"disabled\" disabled>disabled</Option>\r\n          <Option value=\"yiminghe\">yiminghe</Option>\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item label=\"日期选择框\">\r\n        <DatePicker />\r\n      </Form.Item>\r\n      <Form.Item label=\"日期范围选择框\">\r\n        <DatePicker.RangePicker />\r\n      </Form.Item>\r\n      <Form.Item label=\"评分\">\r\n        <Rate defaultValue={5} />\r\n      </Form.Item>\r\n      <Form.Item wrapperCol={{ span: 8, offset: 8 }}>\r\n        <Space>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n          <Button>\r\n            Cancel\r\n          </Button>\r\n        </Space>\r\n      </Form.Item>\r\n    </Form>\r\n  </>\r\n);\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}